package fixtures

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path"
	"path/filepath"
	"strings"
	"time"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindata_file_info struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindata_file_info) Name() string {
	return fi.name
}
func (fi bindata_file_info) Size() int64 {
	return fi.size
}
func (fi bindata_file_info) Mode() os.FileMode {
	return fi.mode
}
func (fi bindata_file_info) ModTime() time.Time {
	return fi.modTime
}
func (fi bindata_file_info) IsDir() bool {
	return false
}
func (fi bindata_file_info) Sys() interface{} {
	return nil
}

var __1_json = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x91\xcd\x8a\xc2\x30\x10\xc7\xef\x7d\x8a\x92\xf3\xee\xd2\xb2\xbb\x08\xbe\x8a\x78\x18\x93\xa1\x1d\x6c\x93\x98\xa4\xd5\x52\xfa\xee\x26\x11\xd4\xd6\x4b\x40\xd4\xc9\x65\xc8\xff\x23\xfc\xc8\x98\xe5\x7e\x18\xca\x9e\x8c\x92\x2d\x4a\x67\xd9\x3a\xdf\xc4\xdb\x30\xe3\x75\x8b\x3e\x37\x68\xf4\x3a\xd3\xf5\x60\x89\x43\xc3\xbe\xe6\xba\x0a\x69\xd6\x49\x3a\x2d\x15\x10\xc2\xa0\x0d\xf2\xbc\x32\x8a\xb5\xb2\x4e\x42\x7b\xa9\x36\x4a\x7c\x1f\x71\x57\x94\x8b\x8a\xe8\x24\xdd\xff\x05\x57\x59\xfc\x94\xe1\xb0\x99\x65\x5a\x3c\xea\xbb\x7a\x12\x68\x42\xc2\x00\xdf\x5b\x0d\x1c\x6f\x91\x3b\xfb\x87\x38\x45\x1a\xe6\xef\x8b\x31\xfd\xe7\xbb\xee\x91\x32\x99\xc5\x3a\xa8\x30\x81\xe3\x3f\x9d\x43\x50\x45\x0e\x1a\xc5\x11\xe4\x3b\x51\x0e\x90\xc0\xb1\x7a\x9a\x23\x6e\xdb\x6c\xca\xce\x01\x00\x00\xff\xff\x3f\xf8\xc5\x3d\x81\x03\x00\x00")

func _1_json_bytes() ([]byte, error) {
	return bindata_read(
		__1_json,
		"1.json",
	)
}

func _1_json() (*asset, error) {
	bytes, err := _1_json_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "1.json", size: 897, mode: os.FileMode(420), modTime: time.Unix(1427428792, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __2_json = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x56\xcd\x92\xda\x30\x0c\xbe\xf3\x14\x4c\xce\xa5\xc4\x71\xec\xd8\x7d\x88\xde\x7a\xea\x74\x3a\xb6\xa4\xb0\x99\x26\x71\x36\x31\xd0\xed\x0e\xef\x5e\x27\x0c\xcc\x00\x81\xbd\x64\x4a\xb7\x45\x07\x7e\x22\x59\xfa\x3e\xe9\x53\xc6\xaf\xb3\x79\xb0\xa8\x74\xab\x02\x16\x9d\x37\x9e\xba\xe8\xd3\xfc\xeb\xf0\xb4\xb7\xd7\xe3\xaf\x21\xce\xbf\x34\x14\xfc\x11\x38\xa4\xe8\xc3\xa9\xaf\xc0\xe0\x39\x8d\x1f\x9e\x83\xab\xaa\xc2\xf7\xa7\x30\x05\x25\x74\xac\x6c\xac\x78\x0e\x64\x63\x54\x4a\x0b\xe0\x12\x6c\x6a\x53\x11\x03\x58\xa6\x88\x43\x74\x92\x64\x77\x56\xa7\x2e\xe0\x47\x9f\xcd\xad\x5b\xd3\x34\xe7\x28\xca\x55\xeb\xd6\x4d\xef\x6f\x5a\x87\xe7\xde\xc6\xf8\xa7\xde\xb7\xdc\x98\x76\xb9\xdd\x6e\x97\x23\x19\xa8\xde\x14\xad\xab\x2b\xaa\xfd\x38\x21\x83\xd8\x52\xd7\x8d\x3a\x87\x80\x27\xd7\xf9\xda\x54\x74\x40\xb1\xd8\x06\xae\x2c\xba\x08\xde\xdd\xe4\x89\xc6\x9b\x8e\xfc\xe9\x3c\x0e\x76\xa5\xf2\xa1\x2a\x52\x6e\xd6\xa5\x9f\xa3\x3d\x63\x77\x8c\x3c\x4c\xb2\x22\x2c\xc2\xd4\xcf\x3b\x75\x8c\x03\x57\xd7\x9f\x69\xbc\x13\xd7\x09\x63\xcf\x77\x3c\xe3\x70\xa0\x71\x6d\x9f\x92\xf3\x58\xde\x8a\x6a\x9d\x77\x7d\x4e\x0f\xcd\x65\xf7\x7a\xdb\x5d\x41\x5d\xd4\x9e\x5a\x03\xbe\x70\x75\x7f\xbe\xdd\x5e\xa3\xd7\xad\x6d\x37\xb0\x8b\x82\x12\xbe\x87\x76\xbd\x31\xa4\x6f\xb3\x91\xd2\x93\x2e\x09\x93\xc6\xf0\xc4\xe4\x2c\x93\xca\xa4\x4a\xc4\xd6\x64\x94\x84\x2f\x14\x56\x31\x84\x9c\xc0\x48\x9d\xb3\x69\x96\x24\xac\xfc\xea\x02\xe4\x9f\xdf\x92\x3d\x8c\x77\xbb\x20\x5f\xea\xe2\xe7\xed\x0d\x39\x69\x69\x59\xd8\x65\xf5\xd2\x3d\x97\xfb\xcf\x8f\x9d\x0b\xc3\xfa\x5f\xf4\xcd\xf3\xcc\x22\x65\x09\x62\xc6\xac\xe2\x9c\x67\x8a\x48\x71\x0d\x20\x35\xe3\x98\xa6\x22\x4b\x6d\xa6\xf9\x34\xfa\x7e\x36\xf7\x17\x77\xc0\xf0\x50\xf6\x45\x03\xfe\x3d\x65\xe7\x5c\x5a\x02\xcb\x33\xcb\xb4\x40\x80\x0c\x2d\x31\xcd\x8c\x10\x06\xb8\x15\x56\x0a\x92\x69\xce\xf4\x44\x6f\x6e\xb4\x0b\xa4\xcd\xfd\xe5\x1d\x40\xbc\xe7\xcb\xcd\x43\xe1\x47\x60\x6f\x2a\x5c\x28\x10\x3c\xd1\x4a\x4b\x80\xc4\xc8\x84\xe7\x0c\xc3\x1d\x9e\x61\x78\x7f\x87\x3b\x89\x8e\x65\x10\x3f\x68\x33\x8d\xc2\xcb\x5f\x29\x63\x7f\x8f\xc6\x93\x87\xc6\x2f\xec\x9e\x1a\x9f\xed\xff\xef\x66\xbf\x03\x00\x00\xff\xff\x6a\xf8\x75\x1d\xc4\x0e\x00\x00")

func _2_json_bytes() ([]byte, error) {
	return bindata_read(
		__2_json,
		"2.json",
	)
}

func _2_json() (*asset, error) {
	bytes, err := _2_json_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "2.json", size: 3780, mode: os.FileMode(420), modTime: time.Unix(1429042363, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __3_json = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x9a\xdf\x8f\x1b\xb7\x11\xc7\xdf\xfd\x57\x10\x7a\x71\x0b\xd8\x67\xfe\xfe\xb1\x2d\x8a\x3a\x01\x52\x34\x40\x9a\x00\x97\xa0\x0f\x85\x1f\x86\xe4\x50\x5a\x5b\xda\x15\xb4\x2b\x5f\xae\x41\xfe\xf7\x0e\xf7\x7c\x86\xef\xdc\xc2\x2b\x9d\x57\xe8\x59\x86\x65\x49\x14\xf7\xf6\xc3\xef\xcc\x77\x86\xfc\xed\x19\xa3\x9f\x55\xea\x77\xbb\x76\x1c\x56\x0d\xfb\xd7\xf4\x42\xfd\xf9\xed\xe3\xb3\xe9\x23\xc3\x06\x04\xbd\xbf\x32\x3e\x19\x25\x83\x0f\x36\x25\x09\x56\xaa\x22\x72\xf6\x5e\x64\xaf\x82\x0d\x25\x70\xab\x5c\x4c\x01\x56\x2f\x1e\x8e\x3f\xe0\xbe\x1f\xda\xb1\x3f\xdc\xd6\x6f\xd9\x8c\xe3\x7e\x68\x5e\xbd\x5a\xb7\xe3\xe6\x18\xaf\x68\xfe\x57\x43\x8e\xfd\x2d\x1e\x5e\xed\xdb\x3d\xbe\x6f\xff\xfd\x78\x7c\x86\x11\x57\x8c\x86\xfe\xbc\x39\xb2\xef\xa1\x63\x32\x30\xc1\x1b\xe9\x1b\xa3\x98\xe4\xc2\xb0\x97\xdc\x70\xfe\x78\x18\x1c\xc7\x4d\x7f\x98\x06\x5e\xc3\x8e\x7d\x53\xa7\x60\x7f\x1e\x31\x6d\xfe\x3a\xc0\x6e\x9a\xf1\xaa\x3f\xac\xff\xf2\x78\xdc\x70\x8c\x6f\x31\x8d\xd3\xc0\x9f\x36\x7d\x77\xcb\xee\xee\x11\x1b\x7b\x36\xb4\xbb\xe3\x96\x2e\x87\x95\xfe\xf0\x8e\x01\xbd\xd6\xee\x1f\x8f\xdf\xc3\x01\x3b\xba\xa3\xec\xd3\x5b\xfa\xf1\xdd\x94\x50\x3a\x9b\xb5\x8d\x36\x82\x90\x42\xf8\xac\x95\x13\xc9\xb9\x24\x8b\xcd\x5e\x4b\xa9\x42\xc9\x72\xf5\x60\xe8\x9b\x8f\xff\xfb\xfd\xc5\x97\x30\x09\xee\x2c\xe7\x21\x71\xc9\xb9\xd1\x12\x1d\xa8\xe2\x2d\xb8\x10\x73\x12\xc9\xe4\x28\x92\xd6\x5e\xea\xc5\x30\xfd\x13\x33\xbb\xc6\x3d\x13\x8e\x71\xd1\x28\x7a\x4c\x98\x34\x61\xd2\xcb\x60\x7a\x9d\x33\x41\xca\xf8\x32\x6d\xa0\x5b\xe3\xd5\xdb\xa1\xef\xd8\x0d\x5d\x39\xc3\x5f\xf7\x78\x68\x77\x04\x04\xb6\x6c\x0f\xb7\xdb\x1e\xf2\x69\xc0\x8a\x51\x3a\x78\x9e\x5c\xca\x25\xdb\x0c\xdc\x8a\x88\xc5\x39\x9f\x63\x92\xbe\xf0\x60\xa5\xf6\xbe\xa8\xf3\x81\x15\x65\x23\xa6\x48\xe2\x11\xc1\xe4\x94\x5c\x8e\x28\x82\x00\x63\x20\xa9\x68\xa2\x35\x68\x75\x11\xe1\x42\xba\xe2\xa6\x91\x66\x61\x5d\x55\x60\x1d\xde\xbc\x60\xbb\xfe\x80\x2c\xe3\x08\xed\x16\xf3\xbd\xd0\xe8\xc2\xa0\xaa\xad\xb4\xbf\x8e\xc7\x03\xfe\xbf\x09\x4c\x3a\x41\x3a\xa2\x75\x20\xb5\x00\x5d\x30\x6a\x09\xb1\x70\xcb\xb5\xe3\x56\x3b\xe4\x1c\x10\x45\x16\x8b\xf1\xba\x3e\x76\x13\x2f\xe1\x99\x54\x0d\xb7\x0d\x77\x17\xe0\xd5\x1f\x47\x1a\xb8\xed\xd7\x6d\xaa\xe1\x8f\x00\xd1\xaf\xd3\x1f\x46\x16\xef\x23\xe4\x69\xa0\x2c\x80\x06\x85\x45\x98\xe0\xd0\x78\x5a\xe2\xd9\x72\x11\x54\xb1\x94\x44\x24\xb7\x9e\xe4\x65\x6c\x0a\xe7\x83\x8a\x59\x5a\x4f\x7f\x29\x57\x71\xef\x8d\x91\x4e\x51\xde\xca\xc6\x52\xbe\x92\x39\xc6\xe4\x14\xe6\xe8\xed\x62\xa0\xbe\x3b\xb4\x77\xa0\x2c\xe3\xba\xd1\x94\xb0\xf8\xc2\xa0\x7e\xc0\xc3\x1a\x59\x3c\x40\x97\x36\xec\xf9\xfe\xd0\x8f\xfd\xf3\xd3\xb0\x84\x04\x59\x66\x83\x3c\x62\x16\x94\xd6\x93\x02\xee\x44\x4c\xd1\x6a\x1d\x65\x16\x90\x80\x53\xe8\x8b\x8f\xbe\x75\x1a\xeb\x00\xa4\x8e\x81\xd4\x61\x84\xd6\x41\x16\x89\xd6\x81\xf1\xce\x6a\x2f\x74\x8e\x52\xbb\x6c\x42\xd2\xe7\x23\xcd\x3a\x79\x13\xb8\x8f\xdc\xab\x92\x30\x72\x32\x20\xc1\x24\x65\x53\xd4\x51\x1b\x9e\x52\x14\x1e\x55\x5a\x2e\x56\x1e\x91\xbd\x3e\xae\x99\x08\x4c\xca\x46\xc9\x46\xba\x85\x93\xdb\xdf\xbb\x76\x6c\x29\x7b\x7d\x59\x63\x27\x25\x9d\xb9\x69\xed\x12\x2e\x81\x93\x30\x1a\xbe\xb4\x4b\xf8\xe6\x48\xa2\x00\x36\x8c\xc7\x7d\x9b\xd9\xb8\x69\xbb\xf5\x30\x99\xba\x11\x28\x8a\x55\xbb\x70\x9a\x52\x66\xaf\xc5\xb3\x57\xfb\x99\x5a\xfc\xba\xab\xfd\xc7\x34\x32\x57\x17\xbb\xb6\x8d\xe6\x0b\x33\xfa\x76\x32\x70\x6c\x03\xc3\x86\x91\x87\x6b\x3b\x82\xd3\x25\x64\xf7\x9f\x39\xcd\x0a\x14\x99\xac\x40\x40\xe5\x4a\x89\x51\x43\x24\x4a\x94\x12\xb4\x36\xc2\x9b\x02\x18\x62\x12\x2a\xfa\x27\x64\x98\x98\x94\x01\x5b\x02\x96\xc4\x31\x99\xe0\x05\x39\x6f\xe7\x15\x28\xc8\x5c\x80\xcf\x56\xdb\xe4\x3e\xb3\x30\x5f\x1d\x90\x14\x4c\x90\x6f\x53\x8d\x36\x17\xf0\xda\x03\xa6\xbe\xcb\x55\x38\xb5\x14\xba\x73\x69\x7f\x22\x29\x1d\xd3\xe6\xb8\x1f\xee\xdc\xc1\x06\x4e\xa5\x65\x62\x56\x9e\x00\xe9\x2a\xa5\x92\x09\x17\x39\x35\x53\xdd\x70\x4e\x10\x9d\x22\x93\x9c\x74\x72\xe7\xd3\x9a\xbd\x1e\x96\x97\x13\x77\x8d\xf1\xcb\x87\xbc\x0a\xeb\x41\x09\x74\x2f\xa8\xa9\x44\x3a\x8d\xcf\xec\xba\xf2\x6c\x3e\xb3\xed\xc3\x05\xd4\x24\x45\x43\x21\x8f\x2f\x9d\xdc\xa7\xfa\x27\x6d\x11\xba\x2a\x1c\x20\x51\x45\x1c\xab\xcf\x1e\x90\x68\xc0\xd8\x9e\x4a\x69\x76\x44\x3a\x9b\x92\x2a\x42\x86\x5c\xff\x40\x90\x89\xeb\xa0\xa8\x56\x95\x2a\x45\x4a\x85\x52\x80\xb3\x49\x12\x26\xf9\x59\x99\xfd\xd5\x28\xfd\x40\x89\x61\xa2\x54\x93\x51\x2d\x57\x79\x58\x98\xd2\x2f\x03\xb2\xea\xa8\x29\xae\xa5\x2d\x0c\x93\x6b\xd8\xb4\x19\x19\x6e\x71\x37\xc1\x38\x4d\x49\x54\xfa\x50\x25\x52\x84\xb3\x1e\xb4\x37\x3c\x82\x43\x49\xff\x64\x13\xbd\xc8\xa9\x60\x02\xca\xf6\xe2\x09\x3d\xa0\xa8\x89\xb5\x52\x8e\x0c\x9d\xc9\xde\x28\xa5\x34\xf9\x14\xc2\x4f\x91\x34\x05\x65\x4b\x56\x81\x9e\x2d\x5a\xf9\x54\x46\xe4\xee\x84\x6f\xb4\x6b\xa4\x5e\x98\xd1\xcf\x9b\x43\x7f\x43\xf1\x8d\xed\xfa\xf4\xee\xd5\x54\xf9\xb0\xae\xcf\x35\x3f\x6d\xf1\x44\x40\xb3\x7d\xd7\xf9\xa9\x68\x6e\x97\xe2\x02\x3d\x1f\x1e\x1a\x43\xe9\x68\xe9\x9e\xcf\x4f\xc7\x0f\x9d\x9d\x63\x97\x69\xf4\x73\xb2\x10\x23\xb4\x1d\x1e\x86\xe7\xec\x1d\xde\x56\x74\x67\x35\x7c\x82\x8d\x31\x03\x18\xba\x75\x94\x96\x54\x8c\x45\x7b\x2b\x8b\x8b\xb2\x24\xab\x22\x8f\x94\x35\x28\xf1\x3f\xa1\x41\x37\xbb\x53\x71\x81\x3e\x82\x10\x8d\x09\x8d\x0c\x0b\xc3\xfa\xae\xdd\x56\xb3\x40\x8f\xd2\xb3\x11\xe2\x76\x6a\x79\x33\x92\x55\xc2\x61\x38\x55\x4f\x8a\x68\x64\x74\x32\x67\x52\x91\xa7\x60\xe4\x3c\xa2\x57\x21\x25\x1b\x84\xca\xe4\xbf\x9c\x8e\x2e\x3c\x01\x51\x08\x00\x9e\x17\x48\x84\x9d\x7b\xf2\x23\x40\x6a\x22\xb5\x4a\x2f\xa2\xb5\xc8\xc9\x3f\x06\x23\x45\xb9\x44\x52\x22\x44\x42\x35\x7c\xf1\x80\x07\x99\x7d\x6a\x1f\x4e\x74\xdb\x52\x5a\xee\x69\x49\x53\x0e\x92\x90\x33\xdd\x29\x4d\x05\x6b\x24\xc3\x1d\x48\x51\x94\xd7\xb5\x08\x02\xed\x13\x42\x1c\x57\x48\xa6\x00\x94\x16\xc6\x68\x23\x53\x34\x40\x20\x92\x0f\xae\x48\xa7\x2d\x60\x95\x8f\x5e\x30\xc4\x7d\x52\x1b\x69\x8a\x6f\xcb\xef\x43\xfc\xad\x85\x6e\x64\x07\xa4\x75\x38\x4e\x1d\x52\x76\x53\xf7\x89\xca\xa1\xdf\x91\x92\xea\xc7\x30\xb3\xef\xaf\x7f\xfc\xc7\x14\x08\xaf\x4e\x23\x46\x99\xc7\x09\xaf\x28\xf2\x50\x08\x82\xa8\x94\xa7\x7b\xcb\xb5\x24\x97\x97\x0c\xd4\x8e\x74\x42\x9f\x78\x79\x02\xb1\xb9\x15\xd8\x85\x88\xd9\x46\xc8\x0b\x14\x48\xb1\xbf\xa1\x4f\x4e\x7b\x46\x35\xc6\xad\x0f\xb0\xdf\x6c\xdb\xcf\x9a\x2a\x5f\xd0\xd3\xdc\xd5\x7e\x36\x9d\xd9\xfc\x2f\xe1\xbb\xe5\xb4\xfd\xba\x74\x37\xe8\xfa\x06\x71\x7c\xc1\xd6\xfd\xc8\xda\x71\xd2\x52\xdb\xad\x19\x50\x6a\x1a\xf6\x5b\x7a\xe5\xb8\x3f\x51\x43\xb3\x6b\x97\xf3\x35\x34\x37\xae\x5e\xc2\x79\x87\xa6\x7a\xbb\xc5\x7b\x76\x35\xff\x10\x0b\xf6\x76\x98\xcc\xf6\x0b\x8a\x80\xbb\xfe\x7d\x45\x55\x7b\xd6\x84\x83\xa2\x5e\x6c\xc7\xe1\x44\x58\x26\x90\x03\xe6\xe4\xe7\xbc\xa4\x1b\x57\x32\xdd\x4f\x51\x0c\x12\x32\x0f\x45\x05\x4d\x08\x8d\xd2\xfc\x09\xb0\x24\x37\x3a\xf0\xec\xc0\x66\x4e\x25\x91\xa0\x52\xd9\x53\x75\x4c\xf3\xc4\x18\x4d\x12\x92\xbc\x84\x35\x0b\xee\xbc\x3e\xdc\xc9\x33\xb2\x11\x4b\x6f\x10\xbd\x4e\xe3\x91\x04\x74\xcb\x76\xf0\x0e\xd9\xb8\xc1\xfb\x4d\xd7\x69\x2b\xaf\x4a\xec\x34\x48\xb3\x37\x43\xcf\xaf\x65\xe7\x56\xcb\x97\xb0\x76\xa1\x51\x9c\xaa\xa5\xa5\xe3\xde\x14\xdd\x6a\xf5\x3a\x90\x6f\xa8\x5b\x14\x77\xdd\x20\xbc\x2b\xa0\xb6\xed\x70\x6a\xcb\x61\xb6\x3f\x3e\xdf\x81\xcf\x2d\xc3\x96\xc4\x34\x69\x29\xd4\x0d\x25\x61\xe8\x71\x81\x5d\xf1\x0f\x6d\xa1\x1a\xf7\xd8\x1f\xc8\x3e\x7c\xc8\x55\x11\xe9\x39\xfe\xf1\x44\x2d\xcd\x0d\x47\x4f\xe8\xdd\xcd\x2c\xc4\x2e\xb1\x23\xee\x1b\x79\xef\xc9\x17\x84\x54\x7b\x77\x5b\xec\xd6\xe3\xe6\x65\x84\x81\x32\xd1\xb0\xe9\x8f\xdb\xfc\x6d\xbf\xdb\xf7\x1d\xc1\xf8\x65\x5f\x2f\x8e\x8d\x87\x36\xbd\x9b\xfc\xdf\x7f\xb9\xfc\x2f\xb4\x5c\xe7\x1e\x33\x38\x1b\xdb\xec\x4c\x78\x21\x53\xe1\x1b\x7e\x89\x6d\xa6\xac\xd8\xb6\x4f\x53\xb6\xaa\x60\xfa\x52\xb6\x6d\x57\x8f\x0b\xbd\x3f\xb1\xdf\x3a\xb7\x1b\xfa\xbf\x00\x4d\xcf\xde\xdc\xcd\xf9\xe1\xc4\xe4\xcb\x1d\x8e\x30\xe7\xd4\xe4\xb9\x27\x16\x46\x58\x4f\xa7\x32\x57\x6d\xd7\x8e\xab\x37\x8f\xdf\xc5\x61\xbc\xae\xdb\x6f\x75\x8a\x3d\x0c\xb4\xb0\x57\x17\xc8\xa9\x1f\x2f\x4a\x5c\xf1\x2b\xfe\xb5\xaf\xea\xdc\xe8\xf4\x70\x5a\xec\x32\x59\xcf\x53\xe6\x3d\xf7\x00\xde\x83\x79\xcb\x74\x84\x6d\xf5\x78\xd1\x3c\xfb\xfd\xd9\x7f\x02\x00\x00\xff\xff\x41\x07\x6b\x90\x6a\x2b\x00\x00")

func _3_json_bytes() ([]byte, error) {
	return bindata_read(
		__3_json,
		"3.json",
	)
}

func _3_json() (*asset, error) {
	bytes, err := _3_json_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "3.json", size: 11114, mode: os.FileMode(420), modTime: time.Unix(1429888460, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __4_json = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xe6\x52\x00\x02\xa5\xd4\xbc\xb2\xcc\xa2\xfc\xbc\xdc\xd4\xbc\x92\x62\x25\x2b\x85\x68\xb0\x28\x08\x54\xc3\x59\x60\x75\x25\x95\x05\xa9\x40\x79\x25\xa0\xea\x92\xd2\xc4\x1c\x25\x1d\x54\xe9\xc4\x94\x94\xa2\xd4\x62\x90\x09\xa8\xfa\xc0\x92\x19\xf9\xc5\x25\x79\x89\xb9\x60\xfd\x29\xa9\x65\x06\x86\x4a\x28\x6a\x6a\xd1\xcc\x2a\x28\xca\x2f\xcb\x4c\x49\x2d\x02\x5b\x97\x98\x5e\x94\x98\x57\x82\xd0\x80\xa4\x98\x86\x2e\x34\xa2\xc4\x85\x60\x56\x2c\x57\x2d\x17\x20\x00\x00\xff\xff\xdc\x1e\x51\xf8\x63\x01\x00\x00")

func _4_json_bytes() ([]byte, error) {
	return bindata_read(
		__4_json,
		"4.json",
	)
}

func _4_json() (*asset, error) {
	bytes, err := _4_json_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "4.json", size: 355, mode: os.FileMode(420), modTime: time.Unix(1427428792, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __5_json = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x94\xc1\x6a\x84\x30\x10\x86\xef\x79\x8a\x25\xe7\xae\x69\xa5\xf4\xd0\x57\x29\x3d\xc4\xcd\xb0\x09\x68\x92\xce\xcc\x5a\x96\xc5\x77\x6f\x8c\x20\xc4\x4a\x6f\x45\x0f\xce\x49\xe7\xff\xc7\xdf\xf9\x08\x79\x88\x53\x2a\xd9\x86\xab\xbb\x9c\x89\x35\x03\xc9\xf7\xd3\x47\xee\x8e\xf5\x98\x9f\xb2\x8f\xef\x11\x92\x2e\x1b\xe7\x35\xde\xe5\x53\xa9\x3a\x93\xb4\x72\x22\xf7\x7b\x40\x72\xc1\x8f\x83\x75\x55\x57\xaf\xb2\xb0\x0c\x8b\xaf\x44\xcd\x76\xb4\xaa\x1b\xa1\xa2\x94\xa4\x2c\x73\x34\xcb\x30\xf0\xbd\xc3\xe0\x3b\xf0\xbc\x9e\xaa\x8d\x41\x20\x5a\x15\xb3\xc1\x06\x62\xaf\xbb\xbc\x50\xc4\x60\xce\xdf\xd0\x3c\xbf\xc8\x5f\xe6\xe1\xcf\xdf\x6d\x5d\x83\x1a\xdd\x82\xdb\x2c\x2b\xe0\xcb\xb4\x80\xea\x82\xb9\xb5\x40\x2a\x4d\x44\x1b\x2b\x0a\x65\xd4\xa7\x58\x89\xf8\x0f\xfe\x6f\x3b\xe4\x9f\x8e\xde\x15\x0e\xf4\x5b\xa0\xff\xd2\x07\xf7\x2d\xb8\x1b\xe8\x8f\xdb\x66\x3b\xf4\xf5\x1e\xd0\x8b\xe9\x7d\x10\x3f\x01\x00\x00\xff\xff\x66\xed\x8c\x2b\x88\x07\x00\x00")

func _5_json_bytes() ([]byte, error) {
	return bindata_read(
		__5_json,
		"5.json",
	)
}

func _5_json() (*asset, error) {
	bytes, err := _5_json_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "5.json", size: 1928, mode: os.FileMode(420), modTime: time.Unix(1427428792, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __6_json = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x95\x51\x4e\x83\x40\x10\x86\xdf\x39\x05\xd9\x67\x91\x61\xd5\x44\x39\x47\x9f\x34\x8d\x19\xdc\x49\x4b\x52\x16\xca\xac\x24\xa6\xe1\x50\x5e\xc4\x33\x09\x5b\x4b\x42\x59\xc1\x47\x69\x99\xf0\x00\xbb\x1f\x3f\x33\x3f\x3f\xe1\xe0\xf9\x4d\x09\x85\x06\x99\x0c\x8b\xd8\x7f\xb1\x2b\x6d\x1d\xba\x33\xcb\x68\xcc\xa8\xd9\x17\x61\x85\x65\xb8\x4b\x93\x30\xfb\xe0\xfd\x4e\xdc\xf4\x29\xd2\x55\x5a\xe6\x3a\x23\x6d\x1a\xb8\x2f\x61\x01\x54\xaa\x24\x66\xe7\xa6\x05\xb6\x39\x9b\xd3\xb3\x8a\x32\x57\x81\x4a\x20\x12\x03\xb6\xee\xad\xd4\x67\x6d\x14\x68\xb6\xd3\xcd\xf2\x7b\x32\x98\xda\x3d\xfd\xc0\x05\x2c\x8a\x57\x95\x9c\x09\x76\xd4\x86\x34\x71\xda\x0a\x8b\xaf\xcf\xa9\xde\xd7\x9e\x63\x8a\x7f\x60\x3e\x1b\xdc\xd0\xcc\x8c\x7f\x2b\x09\x0d\x05\x26\x3d\xc2\x12\xa2\x87\x00\xa2\x00\x9e\x56\x20\x63\x88\x62\x09\xb7\x00\xf0\x3c\xfd\xde\xdc\x5d\x58\x68\xca\xc4\x0e\xfc\x63\x92\x4f\x55\xbb\x9b\xb2\x52\x3f\x1f\x68\x6b\xd8\xd0\xdb\xce\x14\x7f\x3d\x22\xc1\x1a\x8b\x69\x63\x9c\xf7\xd7\x33\x4d\xf0\x1e\x2f\x24\xbe\x8f\x2b\x79\x17\xdf\x37\x87\x5c\xe2\x3b\x6a\xcc\x45\xc5\x57\x51\x35\xbb\x3f\xdf\x92\xe0\x5f\x25\xae\x34\xc1\x72\x49\xf0\x00\x5a\x12\x3c\x92\x60\xef\x78\x5d\x7b\xdf\x01\x00\x00\xff\xff\x15\x03\x09\x4c\x9d\x0c\x00\x00")

func _6_json_bytes() ([]byte, error) {
	return bindata_read(
		__6_json,
		"6.json",
	)
}

func _6_json() (*asset, error) {
	bytes, err := _6_json_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "6.json", size: 3229, mode: os.FileMode(420), modTime: time.Unix(1428807415, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __7_json = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x93\xb1\x6e\x84\x30\x0c\x86\xf7\x3c\x05\xca\x5c\x48\x69\xc5\xd2\x57\xa9\x3a\x04\x62\x91\x48\x90\xa4\xb1\x4b\x85\x10\xef\x7e\x21\xc3\xe9\xe0\x18\x60\x3e\x3c\x19\xff\xbf\x71\xfc\x29\x99\x58\x16\x83\x77\xae\x35\x4d\x8e\x24\x09\x90\x7f\x65\xdf\xa9\xba\xc4\x74\xcf\x92\x8f\x46\x0f\x51\xe7\x9d\xa9\x83\x0c\x23\x7f\x5b\xcb\x46\x45\x71\xdd\x92\xea\x03\x04\x34\xce\x2e\x9d\x55\x51\x15\xe5\x27\x5f\x79\xe6\xcd\x6f\xbc\x24\xbd\x78\x05\x50\x23\x34\x91\x57\xa2\x77\xea\xaf\x03\x14\x71\xb0\xd7\xbe\x40\xb7\x1d\x0d\x76\x30\xc1\xd9\x1e\x2c\xed\x9f\x41\x2a\x15\x00\x71\x57\x4c\x06\xed\x90\xac\xec\xd3\x7e\x3e\x38\x95\xff\x43\xfd\x5e\xf2\x27\xf3\xcc\xf6\xbf\x1e\xb6\x78\x51\x6a\xf1\xfe\xb4\x70\x01\x3b\x0e\xec\x57\x5e\xb4\x8e\xd3\x52\x30\x5c\xef\xf1\x2c\xb0\x8f\x13\xc0\x52\xf6\xc3\x66\x76\x0b\x00\x00\xff\xff\xf3\x26\x00\x02\x16\x06\x00\x00")

func _7_json_bytes() ([]byte, error) {
	return bindata_read(
		__7_json,
		"7.json",
	)
}

func _7_json() (*asset, error) {
	bytes, err := _7_json_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "7.json", size: 1558, mode: os.FileMode(420), modTime: time.Unix(1427428792, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __8_json = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x97\xdb\x8e\x82\x30\x10\x86\xef\x79\x0a\xd2\x6b\xdd\x96\x83\xa0\xbe\xca\xc6\x8b\x4a\x1b\x25\x8b\xb4\xb6\x45\x34\xc6\x77\x5f\x0e\xae\x2e\xa7\x75\x93\x0d\xba\x0d\xf4\xc2\x68\xe7\xb7\x33\x9d\xf9\xf2\x07\xce\x86\x99\x2d\xc0\x05\x0b\xa8\x94\x54\x82\xa5\xf9\x5e\x6c\xe5\xeb\x7c\xfb\x56\x88\x22\xb6\x09\x83\xa9\x54\x58\x95\x3a\x13\xc0\x44\x0a\x18\xb1\x00\x47\x70\x1d\xc6\x10\x73\x0e\x26\xd7\x5d\x99\x6f\x6c\x95\xe2\x04\x98\xab\x49\xf5\xa0\x44\x52\x91\x1d\x00\xd2\x34\x05\xb5\xd0\x46\xb0\x84\x77\xc4\x82\x94\xe4\x11\x78\xc0\x02\x8a\xe4\x9a\xae\x2a\xe1\x61\x2e\xf1\x6c\xcb\xae\x05\x68\x7c\x08\x05\x8b\x77\x34\x56\x99\xa0\x7a\xb1\x42\x80\x09\x11\x59\x07\x5a\x83\x85\x60\xcb\xa4\x8a\xf1\x8e\xe6\x25\x64\xed\x22\xd3\x94\xae\x91\x05\x1a\xe2\x4b\x65\xe7\x52\xab\x23\x0a\xa5\xa2\x71\xa5\xcb\x5f\xab\x23\xaf\x3a\xf1\x32\x27\x13\xaa\x76\xdd\xfb\xb5\x05\x53\xac\x1c\x89\x0a\x78\xa3\xe1\x77\x5d\x7e\xc6\xd2\x9c\xa3\x07\x55\xaf\x8c\x96\xfa\x7f\x49\x43\xb8\xa6\x47\x1a\xc0\xdd\x49\xee\xa3\x1f\x66\x5f\xc4\x3b\xa7\xdf\x1a\x25\x58\x61\x49\xd5\x8d\x81\x2c\x15\x6c\x15\x96\x14\xd8\x1e\x7a\x06\x06\x44\x57\x0a\x1c\x07\x79\xcd\xba\x9b\xff\x79\x50\x51\x12\x87\xc7\xce\x8a\xb0\xda\x36\xc7\x55\x7e\xbe\x49\x16\x7c\x3c\x6a\xdc\x5f\x40\xfc\x77\xb6\xe4\xb8\xbe\xe7\xf6\x0a\x64\xd6\x84\x0d\xd5\x12\xc6\x61\x58\x92\x3f\xf3\xfc\x11\x80\x9a\x6e\x74\xa3\xd7\xb8\xd1\xdc\x75\x66\xbd\xc2\xb8\xc7\x5a\x92\x38\x0c\x2b\xb2\xdc\xf9\xc2\x1a\xc7\xff\x5d\x37\x1a\xd1\x4b\x8c\xc8\x9e\x2d\x7c\xd4\x2b\x89\x84\x1e\x34\x7d\x46\x1f\x86\x17\x39\x08\x39\xfd\xbe\xa9\xe9\x4b\xc0\x68\x47\xcf\xb6\x23\x64\x5b\x5e\xef\x30\xda\x5a\xc2\x38\x10\x3b\xf2\x9d\xc5\x48\x40\x5d\xa7\xa5\x1d\x19\xe5\xef\x8b\xf1\x19\x00\x00\xff\xff\x6a\xe8\x7e\x3d\xe8\x16\x00\x00")

func _8_json_bytes() ([]byte, error) {
	return bindata_read(
		__8_json,
		"8.json",
	)
}

func _8_json() (*asset, error) {
	bytes, err := _8_json_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "8.json", size: 5864, mode: os.FileMode(420), modTime: time.Unix(1427428792, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"1.json": _1_json,
	"2.json": _2_json,
	"3.json": _3_json,
	"4.json": _4_json,
	"5.json": _5_json,
	"6.json": _6_json,
	"7.json": _7_json,
	"8.json": _8_json,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func     func() (*asset, error)
	Children map[string]*_bintree_t
}

var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"1.json": &_bintree_t{_1_json, map[string]*_bintree_t{}},
	"2.json": &_bintree_t{_2_json, map[string]*_bintree_t{}},
	"3.json": &_bintree_t{_3_json, map[string]*_bintree_t{}},
	"4.json": &_bintree_t{_4_json, map[string]*_bintree_t{}},
	"5.json": &_bintree_t{_5_json, map[string]*_bintree_t{}},
	"6.json": &_bintree_t{_6_json, map[string]*_bintree_t{}},
	"7.json": &_bintree_t{_7_json, map[string]*_bintree_t{}},
	"8.json": &_bintree_t{_8_json, map[string]*_bintree_t{}},
}}

// Restore an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// Restore assets under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	if err != nil { // File
		return RestoreAsset(dir, name)
	} else { // Dir
		for _, child := range children {
			err = RestoreAssets(dir, path.Join(name, child))
			if err != nil {
				return err
			}
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
